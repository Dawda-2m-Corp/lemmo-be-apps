# Generated by Django 5.2.4 on 2025-07-25 21:28

import django.core.validators
import django.db.models.deletion
import simple_history.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Batch",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Unique code identifier (uppercase letters, numbers, underscores, hyphens only)",
                        max_length=50,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Code must contain only uppercase letters, numbers, underscores, and hyphens.",
                                regex="^[A-Z0-9_-]+$",
                            )
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("name", models.CharField(max_length=200)),
                ("expiry_date", models.DateField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Batch",
                "verbose_name_plural": "Batches",
                "db_table": "tblItemBatches",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Unique code identifier (uppercase letters, numbers, underscores, hyphens only)",
                        max_length=50,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Code must contain only uppercase letters, numbers, underscores, and hyphens.",
                                regex="^[A-Z0-9_-]+$",
                            )
                        ],
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "product_type",
                    models.CharField(
                        choices=[
                            ("MEDICATION", "Medication"),
                            ("MEDICAL_SUPPLY", "Medical Supply"),
                            ("EQUIPMENT", "Equipment"),
                            ("CONSUMABLE", "Consumable"),
                            ("VACCINE", "Vaccine"),
                            ("DIAGNOSTIC", "Diagnostic"),
                            ("NUTRITIONAL", "Nutritional"),
                            ("OTHER", "Other"),
                        ],
                        default="OTHER",
                        max_length=20,
                    ),
                ),
                (
                    "unit_of_measure",
                    models.CharField(
                        help_text="e.g., tablets, vials, units", max_length=50
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("stock_quantity", models.PositiveIntegerField(default=0)),
                (
                    "generic_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("brand_name", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "manufacturer",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "ndc_code",
                    models.CharField(
                        blank=True,
                        help_text="National Drug Code",
                        max_length=20,
                        null=True,
                    ),
                ),
                ("rx_required", models.BooleanField(default=False)),
                (
                    "controlled_substance",
                    models.CharField(
                        choices=[
                            ("NONE", "Not Controlled"),
                            ("SCHEDULE_I", "Schedule I"),
                            ("SCHEDULE_II", "Schedule II"),
                            ("SCHEDULE_III", "Schedule III"),
                            ("SCHEDULE_IV", "Schedule IV"),
                            ("SCHEDULE_V", "Schedule V"),
                        ],
                        default="NONE",
                        max_length=20,
                    ),
                ),
                (
                    "storage_type",
                    models.CharField(
                        choices=[
                            ("ROOM_TEMP", "Room Temperature"),
                            ("REFRIGERATED", "Refrigerated (2-8°C)"),
                            ("FROZEN", "Frozen (-20°C)"),
                            ("ULTRA_COLD", "Ultra Cold (-70°C)"),
                            ("CONTROLLED", "Controlled Temperature"),
                        ],
                        default="ROOM_TEMP",
                        max_length=20,
                    ),
                ),
                ("storage_notes", models.TextField(blank=True, null=True)),
                ("expiration_date_required", models.BooleanField(default=True)),
                ("lot_number_required", models.BooleanField(default=True)),
                ("min_stock_level", models.PositiveIntegerField(default=0)),
                ("max_stock_level", models.PositiveIntegerField(default=1000)),
                ("reorder_point", models.PositiveIntegerField(default=10)),
                ("fda_approved", models.BooleanField(default=False)),
                ("fda_approval_date", models.DateField(blank=True, null=True)),
                ("requires_prescription", models.BooleanField(default=False)),
                ("requires_special_handling", models.BooleanField(default=False)),
                ("hazardous_material", models.BooleanField(default=False)),
                ("temperature_sensitive", models.BooleanField(default=False)),
                (
                    "weight_grams",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "dimensions_cm",
                    models.CharField(
                        blank=True, help_text="LxWxH in cm", max_length=50, null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Product",
                "verbose_name_plural": "Products",
                "db_table": "tblProducts",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalBatch",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                (
                    "code",
                    models.CharField(
                        db_index=True,
                        help_text="Unique code identifier (uppercase letters, numbers, underscores, hyphens only)",
                        max_length=50,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Code must contain only uppercase letters, numbers, underscores, and hyphens.",
                                regex="^[A-Z0-9_-]+$",
                            )
                        ],
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(blank=True, db_index=True, editable=False),
                ),
                (
                    "updated_at",
                    models.DateTimeField(blank=True, db_index=True, editable=False),
                ),
                ("name", models.CharField(max_length=200)),
                ("expiry_date", models.DateField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Batch",
                "verbose_name_plural": "historical Batches",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalProductBatch",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("batch_number", models.CharField(db_index=True, max_length=100)),
                ("lot_number", models.CharField(blank=True, max_length=100, null=True)),
                ("quantity", models.PositiveIntegerField()),
                ("remaining_quantity", models.PositiveIntegerField()),
                ("manufacturing_date", models.DateField()),
                ("expiration_date", models.DateField()),
                ("cost_per_unit", models.DecimalField(decimal_places=2, max_digits=10)),
                ("supplier", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "supplier_batch_number",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("quality_control_passed", models.BooleanField(default=True)),
                ("notes", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="inventory.product",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Product Batch",
                "verbose_name_plural": "historical Product Batches",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalItem",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                (
                    "code",
                    models.CharField(
                        db_index=True,
                        help_text="Unique code identifier (uppercase letters, numbers, underscores, hyphens only)",
                        max_length=50,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Code must contain only uppercase letters, numbers, underscores, and hyphens.",
                                regex="^[A-Z0-9_-]+$",
                            )
                        ],
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(blank=True, db_index=True, editable=False),
                ),
                (
                    "updated_at",
                    models.DateTimeField(blank=True, db_index=True, editable=False),
                ),
                ("label", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("bar_code", models.TextField(blank=True, null=True)),
                ("expiry_date", models.DateField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "batch",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="inventory.batch",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="inventory.product",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Item",
                "verbose_name_plural": "historical Items",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ProductBatch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("batch_number", models.CharField(max_length=100, unique=True)),
                ("lot_number", models.CharField(blank=True, max_length=100, null=True)),
                ("quantity", models.PositiveIntegerField()),
                ("remaining_quantity", models.PositiveIntegerField()),
                ("manufacturing_date", models.DateField()),
                ("expiration_date", models.DateField()),
                ("cost_per_unit", models.DecimalField(decimal_places=2, max_digits=10)),
                ("supplier", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "supplier_batch_number",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("quality_control_passed", models.BooleanField(default=True)),
                ("notes", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="batches",
                        to="inventory.product",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Batch",
                "verbose_name_plural": "Product Batches",
                "db_table": "tblProductBatches",
                "ordering": ["-expiration_date"],
            },
        ),
        migrations.CreateModel(
            name="ProductCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="inventory.productcategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Category",
                "verbose_name_plural": "Product Categories",
                "db_table": "tblProductCategories",
            },
        ),
        migrations.AddField(
            model_name="product",
            name="category",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="inventory.productcategory",
            ),
        ),
        migrations.CreateModel(
            name="HistoricalProduct",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                (
                    "code",
                    models.CharField(
                        db_index=True,
                        help_text="Unique code identifier (uppercase letters, numbers, underscores, hyphens only)",
                        max_length=50,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Code must contain only uppercase letters, numbers, underscores, and hyphens.",
                                regex="^[A-Z0-9_-]+$",
                            )
                        ],
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "product_type",
                    models.CharField(
                        choices=[
                            ("MEDICATION", "Medication"),
                            ("MEDICAL_SUPPLY", "Medical Supply"),
                            ("EQUIPMENT", "Equipment"),
                            ("CONSUMABLE", "Consumable"),
                            ("VACCINE", "Vaccine"),
                            ("DIAGNOSTIC", "Diagnostic"),
                            ("NUTRITIONAL", "Nutritional"),
                            ("OTHER", "Other"),
                        ],
                        default="OTHER",
                        max_length=20,
                    ),
                ),
                (
                    "unit_of_measure",
                    models.CharField(
                        help_text="e.g., tablets, vials, units", max_length=50
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("stock_quantity", models.PositiveIntegerField(default=0)),
                (
                    "generic_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("brand_name", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "manufacturer",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "ndc_code",
                    models.CharField(
                        blank=True,
                        help_text="National Drug Code",
                        max_length=20,
                        null=True,
                    ),
                ),
                ("rx_required", models.BooleanField(default=False)),
                (
                    "controlled_substance",
                    models.CharField(
                        choices=[
                            ("NONE", "Not Controlled"),
                            ("SCHEDULE_I", "Schedule I"),
                            ("SCHEDULE_II", "Schedule II"),
                            ("SCHEDULE_III", "Schedule III"),
                            ("SCHEDULE_IV", "Schedule IV"),
                            ("SCHEDULE_V", "Schedule V"),
                        ],
                        default="NONE",
                        max_length=20,
                    ),
                ),
                (
                    "storage_type",
                    models.CharField(
                        choices=[
                            ("ROOM_TEMP", "Room Temperature"),
                            ("REFRIGERATED", "Refrigerated (2-8°C)"),
                            ("FROZEN", "Frozen (-20°C)"),
                            ("ULTRA_COLD", "Ultra Cold (-70°C)"),
                            ("CONTROLLED", "Controlled Temperature"),
                        ],
                        default="ROOM_TEMP",
                        max_length=20,
                    ),
                ),
                ("storage_notes", models.TextField(blank=True, null=True)),
                ("expiration_date_required", models.BooleanField(default=True)),
                ("lot_number_required", models.BooleanField(default=True)),
                ("min_stock_level", models.PositiveIntegerField(default=0)),
                ("max_stock_level", models.PositiveIntegerField(default=1000)),
                ("reorder_point", models.PositiveIntegerField(default=10)),
                ("fda_approved", models.BooleanField(default=False)),
                ("fda_approval_date", models.DateField(blank=True, null=True)),
                ("requires_prescription", models.BooleanField(default=False)),
                ("requires_special_handling", models.BooleanField(default=False)),
                ("hazardous_material", models.BooleanField(default=False)),
                ("temperature_sensitive", models.BooleanField(default=False)),
                (
                    "weight_grams",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "dimensions_cm",
                    models.CharField(
                        blank=True, help_text="LxWxH in cm", max_length=50, null=True
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="inventory.productcategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Product",
                "verbose_name_plural": "historical Products",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ProductImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("image", models.ImageField(upload_to="product_images/")),
                ("caption", models.CharField(blank=True, max_length=255, null=True)),
                ("is_primary", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="inventory.product",
                    ),
                ),
            ],
            options={
                "db_table": "tblProductImages",
                "ordering": ["-is_primary", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="Item",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Unique code identifier (uppercase letters, numbers, underscores, hyphens only)",
                        max_length=50,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Code must contain only uppercase letters, numbers, underscores, and hyphens.",
                                regex="^[A-Z0-9_-]+$",
                            )
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("label", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("bar_code", models.TextField(blank=True, null=True)),
                ("expiry_date", models.DateField(blank=True, null=True)),
                (
                    "batch",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="inventory.batch",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="inventory.product",
                    ),
                ),
            ],
            options={
                "verbose_name": "Item",
                "verbose_name_plural": "Items",
                "db_table": "tblProductItems",
                "ordering": ["-created_at"],
                "unique_together": {("label", "product", "batch")},
            },
        ),
    ]
